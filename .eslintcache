[{"C:\\Users\\morga\\Documents\\GitHub\\React-Ring-of-Fire\\src\\index.js":"1","C:\\Users\\morga\\Documents\\GitHub\\React-Ring-of-Fire\\src\\reportWebVitals.js":"2","C:\\Users\\morga\\Documents\\GitHub\\React-Ring-of-Fire\\src\\App.js":"3","C:\\Users\\morga\\Documents\\GitHub\\React-Ring-of-Fire\\src\\components\\header.js":"4","C:\\Users\\morga\\Documents\\GitHub\\React-Ring-of-Fire\\src\\components\\game.js":"5"},{"size":517,"mtime":1611786102278,"results":"6","hashOfConfig":"7"},{"size":375,"mtime":1611786102278,"results":"8","hashOfConfig":"7"},{"size":354,"mtime":1611786102277,"results":"9","hashOfConfig":"7"},{"size":953,"mtime":1611786102277,"results":"10","hashOfConfig":"7"},{"size":7106,"mtime":1611786102277,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1mkkvcp",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"C:\\Users\\morga\\Documents\\GitHub\\React-Ring-of-Fire\\src\\index.js",[],["24","25"],"C:\\Users\\morga\\Documents\\GitHub\\React-Ring-of-Fire\\src\\reportWebVitals.js",[],"C:\\Users\\morga\\Documents\\GitHub\\React-Ring-of-Fire\\src\\App.js",[],"C:\\Users\\morga\\Documents\\GitHub\\React-Ring-of-Fire\\src\\components\\header.js",[],"C:\\Users\\morga\\Documents\\GitHub\\React-Ring-of-Fire\\src\\components\\game.js",["26","27","28","29","30"],"import React from \"react\";\r\n//import Select from 'react-dropdown-select'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {FaPlusCircle, FaMinusCircle} from 'react-icons/fa';\r\nimport {BsPlayFill} from 'react-icons/bs';\r\n\r\n\r\n\r\nexport default class game extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            player: '',\r\n            playerCount: 0,\r\n            players: [],\r\n            deckID: \"\",\r\n            remainingCards: \"\",\r\n            numberOfKings: 4,\r\n            rules: new Map(),\r\n            infoMessage: '',\r\n            inGame: false,\r\n            cardImage: 'https://i.pinimg.com/originals/10/80/a4/1080a4bd1a33cec92019fab5efb3995d.png'\r\n        }\r\n        this.setUpMap();\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    setUpMap = () => {\r\n        this.state.rules.set('ACE', \"Waterfall -  Everyone Should Keep Drinking Until The Person Who Picked The Card Stop\");\r\n        this.state.rules.set('2', 'Choose - You Can Choose Someone To Drink');\r\n        this.state.rules.set('3', 'Me - You Must Drink');\r\n        this.state.rules.set('4', 'Whores - All Girls Must Drink');\r\n        this.state.rules.set('5', 'Thumb Master');\r\n        this.state.rules.set('6',  'Dicks - All Guys Drink');\r\n        this.state.rules.set('7', 'Heaven - Point Your Finger In The Sky, Whoever Is Last Must Drink');\r\n        this.state.rules.set('8', 'Mate - Choose Someone To Drink With You');\r\n        this.state.rules.set('9', 'Rhyme - Pick A Word To Rhyme');\r\n        this.state.rules.set('10', 'Categories - Pick A Category');\r\n        this.state.rules.set('JACK', 'Make A Rule');\r\n        this.state.rules.set('QUEEN', 'Question Master');\r\n        this.state.rules.set('KING','Take 2 Sips of Your Drink');\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        if(this.state.inGame == true){\r\n            //Adds a player to the array - MWH\r\n            this.state.players.push(this.state.player);\r\n            this.setState({\r\n                infoMessage: this.state.player + ' added to the game',\r\n                player: '',\r\n                playerCount: this.state.playerCount + 1\r\n            })\r\n        }else{\r\n            this.setState({\r\n                infoMessage: 'Start a New Game to Add a New Player'\r\n            })\r\n        }\r\n    }\r\n\r\n    handleClearSubmit = event => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            players: [],\r\n            infoMessage: 'All Players Removed'\r\n        })\r\n    }\r\n\r\n    handleNewSubmit = async event => {\r\n        event.preventDefault();\r\n        const newDeck = await fetch('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1').then(response => response.json());\r\n        this.setState({\r\n            deckID: newDeck.deck_id,\r\n            remainingCards: newDeck.remaining,\r\n            numberOfKings: 4,\r\n            infoMessage: 'New Game Started',\r\n            inGame:true,\r\n            cardImage: 'https://i.pinimg.com/originals/10/80/a4/1080a4bd1a33cec92019fab5efb3995d.png'\r\n        })  \r\n    }\r\n\r\n    handlePickCard = async event => {\r\n        event.preventDefault();\r\n        if(this.state.inGame == true){\r\n            const pickedCard = await fetch('https://deckofcardsapi.com/api/deck/'+this.state.deckID+'/draw/?count=1').then(res => res.json());\r\n            if(pickedCard.cards[0].code.startsWith('K')){this.setState({numberOfKings: this.state.numberOfKings - 1})};\r\n\r\n            if(this.state.playerCount + 1 > this.state.players.length-1){this.state.playerCount = 0}\r\n            else{this.state.playerCount = this.state.playerCount + 1}\r\n\r\n            if(this.state.numberOfKings == 0){this.setState({infoMessage: 'Game Over! '+ this.state.players[this.state.playerCount] +' Pick The Last King',inGame:false,cardImage:pickedCard.cards[0].image,remainingCards: this.state.remainingCards - 1})}\r\n            else if(this.state.remainingCards == 0){this.setState({infoMessage: 'Game Over! All Cards Picked'})}\r\n            else{this.setState({\r\n                remainingCards: this.state.remainingCards - 1,\r\n                cardImage: pickedCard.cards[0].image, \r\n                infoMessage: this.state.players[this.state.playerCount] + ' Picked (' + this.state.remainingCards + \") \" + this.state.rules.get(pickedCard.cards[0].value)\r\n            })} ; \r\n        }else{\r\n            this.setState({\r\n                infoMessage: 'Start a New Game to Pick a Card!'\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div style={{backgroundColor:'#fbf5f3', width:'80%', height:'700px', marginLeft:'10%',marginTop:'60px'}}>\r\n                <div style={{backgroundColor:'#ff5964', width:'100%', height:'60px', marginBottom:'1%'}}>\r\n                    <p style={{fontSize: '32px',width:'100%',marginBlockStart:'0px',float:'left',marginBlockEnd: '0px'}}>{this.state.infoMessage}</p>\r\n                </div>\r\n                <centre>\r\n                    <img src={this.state.cardImage} style={{width:'25%',height:'65%'}} />\r\n                </centre>\r\n                <div style={{float:\"right\"}}>\r\n                    <form onSubmit={this.handleNewSubmit}>\r\n                        <button type=\"submit\" className=\"btn btn-success\" data-dismiss=\"modal\">\r\n                        Start New Game <BsPlayFill />\r\n                        </button>  \r\n                    </form>\r\n                    <br />\r\n                    <form onSubmit={this.handlePickCard}>\r\n                        <button type=\"submit\" className=\"btn btn-success\" data-dismiss=\"modal\">\r\n                        Pick Card <FaPlusCircle />\r\n                        </button>  \r\n                    </form>\r\n                    <br />\r\n                    <h3>Add New Player</h3>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <input type = \"text\" name=\"player\" value={this.state.player} onChange={this.handleInputChange} style={{width:\"100%\",fontSize:\"20px\"}} required/>\r\n                        <br />   \r\n                        <br />\r\n                        <button type=\"submit\" className=\"btn btn-success\" data-dismiss=\"modal\">\r\n                        Add Player <FaPlusCircle />\r\n                        </button>  \r\n                    </form>\r\n                    <br />\r\n                    <h3>List of Players</h3>\r\n                    <ol>\r\n                        {this.state.players.map(player => (\r\n                            <li key={player}>{player}</li>\r\n                        ))}\r\n                    </ol>\r\n                    <form onSubmit={this.handleClearSubmit}>\r\n                        <button type=\"submit\" className=\"btn btn-danger\" data-dismiss=\"modal\">\r\n                        Remove All Players <FaMinusCircle />\r\n                        </button>  \r\n                    </form>\r\n                </div>\r\n            </div>\r\n            )       \r\n    }\r\n}",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":54,"column":30,"nodeType":"37","messageId":"38","endLine":54,"endColumn":32},{"ruleId":"35","severity":1,"message":"36","line":92,"column":30,"nodeType":"37","messageId":"38","endLine":92,"endColumn":32},{"ruleId":"35","severity":1,"message":"36","line":99,"column":41,"nodeType":"37","messageId":"38","endLine":99,"endColumn":43},{"ruleId":"35","severity":1,"message":"36","line":100,"column":47,"nodeType":"37","messageId":"38","endLine":100,"endColumn":49},{"ruleId":"39","severity":1,"message":"40","line":120,"column":21,"nodeType":"41","endLine":120,"endColumn":90},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]